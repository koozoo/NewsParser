from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from bot.keyboards.inline import admin_menu
from bot.keyboards.reply import yes_no
from bot.handlers.utils import is_email
from bot.view.main import View
from database.methods.main import Database
from database.models.channel import ChannelData
from scheduler.main import scheduler


async def text_messages(query: str, **kwargs):
    texts = {
        "init": "‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ 1 –∑–∞ —Ä–∞–∑. ‚ö†Ô∏è\n"
                "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä public –∫–∞–Ω–∞–ª–∞: https://t.me/test_parser_news",
        "process_url": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \n"
                       f"{kwargs.get('url', None)}",
        "filed_process_url": "–í —Å—Å—ã–ª–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å https://t.me, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. \n"
                             "–ü—Ä–∏–º–µ—Ä privat –∫–∞–Ω–∞–ª–∞: https://t.me/+koUUZxSej2NjNDhi\n"
                             "–ü—Ä–∏–º–µ—Ä public –∫–∞–Ω–∞–ª–∞: https://t.me/test_parser_news",
        "process_finish": f"üéâ –ì—Ä—É–ø–ø–∞ {kwargs.get('url', None)} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–¥—É—Ç "
                          "—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
        "process_finish_error": f"–ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. ü§∑ "

    }

    return texts[query]


class UrlAction(StatesGroup):
    url = State()
    finish = State()


class InterfaceFsmUrl:

    @staticmethod
    async def init_action_url(call: CallbackQuery, state: FSMContext):
        await state.set_state(UrlAction.url)

        msg_entity = await call.message.answer(text=await text_messages(query="init"))
        await state.update_data(msg_id=msg_entity.message_id)

    @staticmethod
    async def process_url(message: Message, state: FSMContext):
        await state.update_data(url=message.text)
        view = View(message)
        data = await state.get_data()

        await view.delete_message()
        await view.delete_message(data['msg_id'])

        data = await state.get_data()
        await state.set_state(UrlAction.finish)
        msg_entity = await message.answer(text=await text_messages(query="process_url", url=data.get('url')),
                                          reply_markup=yes_no())
        await state.update_data(msg_id=msg_entity.message_id)

    @staticmethod
    async def filed_process_url(message: Message, state: FSMContext):
        view = View(message)
        data = await state.get_data()

        await view.delete_message()
        await view.delete_message(data['msg_id'])

        msg_entity = await message.answer(text=await text_messages(query="filed_process_url"))
        await state.update_data(msg_id=msg_entity.message_id)

    @staticmethod
    async def process_finish(message: Message, state: FSMContext):
        db = Database()
        answer = await state.update_data(answer=message.text.casefold())
        view = View(message)
        data = await state.get_data()

        await view.delete_message()
        await view.delete_message(data['msg_id'])

        if answer.get('answer') == "–¥–∞":
            data = await state.get_data()

            channel_data = ChannelData(link=data['url'])

            if not await db.get_channel_by_link(link=data['url']):
                scheduler.add_job(db.add_channel, kwargs={"channel_data": channel_data})

                await view.print_message(text=await text_messages(query="process_finish", url=data.get('url')),
                                         kb=admin_menu)
            else:
                await view.print_message(text=await text_messages(query="process_finish_error", url=data.get('url')),
                                         kb=admin_menu)
            await state.clear()
        else:
            await state.set_state(UrlAction.url)
            msg_entity = await message.answer(text=await text_messages(query="init"),
                                              reply_markup=ReplyKeyboardRemove())
            await state.update_data(msg_id=msg_entity.message_id)
